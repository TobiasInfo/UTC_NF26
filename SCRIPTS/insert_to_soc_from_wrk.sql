-- Create volatile tables for variables
CREATE VOLATILE TABLE VarTable (
    rid INTEGER,
    execid INTEGER
) ON COMMIT PRESERVE ROWS;

-- Insert initial values
INSERT INTO VarTable (rid, execid)
SELECT COALESCE(MAX(r.RUN_ID), 0), COALESCE(MAX(t.EXEC_ID), 0)
FROM TCH.T_SUIV_RUN AS r, TCH.T_SUIV_TRMT AS t;

-- Increment rid and execid
UPDATE VarTable
SET execid = execid + 1;

-- Insert into TCH.T_SUIV_TRMT
INSERT INTO TCH.T_SUIV_TRMT (EXEC_ID, RUN_ID, SCRPT_NAME, EXEC_STRT_DTTM, EXEC_END_DTTM, EXEC_STTS_CD)
SELECT execid, rid, 'insert_to_soc_from_wrk.sql', CURRENT_TIMESTAMP(0), NULL, 'ENC'
FROM VarTable;

MERGE INTO SOC.R_ROOM
USING (
    SELECT
         ROOM_NUM,
         ROOM_NAME,
         FLOR_NUM,
         BULD_NAME,
         ROOM_TYP,
         ROOM_DAY_RATE,
         CRTN_DT,
        (SELECT execid FROM VarTable) AS EXEC_ID
    FROM
        WRK.R_ROOM
) AS s(ROOM_NUM, ROOM_NAME, FLOR_NUM, BULD_NAME, ROOM_TYP, ROOM_DAY_RATE, CRTN_DT,EXEC_ID)
ON SOC.R_ROOM.ROOM_NUM = s.ROOM_NUM
WHEN MATCHED THEN UPDATE
    SET ROOM_NAME = s.ROOM_NAME,
        FLOR_NUM = s.FLOR_NUM,
        BULD_NAME = s.BULD_NAME,
        ROOM_TYP = s.ROOM_TYP,
        ROOM_DAY_RATE = s.ROOM_DAY_RATE,
        CRTN_DT = s.CRTN_DT,
        EXEC_ID = s.EXEC_ID
WHEN NOT MATCHED THEN INSERT (ROOM_NUM, ROOM_NAME, FLOR_NUM, BULD_NAME, ROOM_TYP, ROOM_DAY_RATE, CRTN_DT,EXEC_ID)
    VALUES (s.ROOM_NUM, s.ROOM_NAME, s.FLOR_NUM, s.BULD_NAME, s.ROOM_TYP, s.ROOM_DAY_RATE, s.CRTN_DT,s.EXEC_ID);


MERGE INTO SOC.R_MEDC
USING (
    SELECT
        MEDC_ID,
        MEDC_CD,
        MEDC_NAME,
        MEDC_COND,
        MEDC_CATG,
        MEDC_BRND,
        (SELECT execid FROM VarTable) AS EXEC_ID
    FROM
        WRK.R_MEDC
) AS s(MEDC_ID, MEDC_CD, MEDC_NAME, MEDC_COND, MEDC_CATG, MEDC_BRND, EXEC_ID)
ON SOC.R_MEDC.MEDC_ID = s.MEDC_ID 
WHEN MATCHED THEN UPDATE
    SET MEDC_CD = s.MEDC_CD,
        MEDC_NAME = s.MEDC_NAME,
        MEDC_COND = s.MEDC_COND,
        MEDC_CATG = s.MEDC_CATG,
        MEDC_BRND = s.MEDC_BRND,
        EXEC_ID = s.EXEC_ID
WHEN NOT MATCHED THEN INSERT (MEDC_ID, MEDC_CD, MEDC_NAME, MEDC_COND, MEDC_CATG, MEDC_BRND, EXEC_ID)
    VALUES (s.MEDC_ID, s.MEDC_CD, s.MEDC_NAME, s.MEDC_COND, s.MEDC_CATG, s.MEDC_BRND, s.EXEC_ID);

MERGE INTO SOC.R_PART
USING (
    SELECT
        PART_ID,
        SRC_ID,
        SRC_TYP
    FROM
        WRK.R_PART
) AS s(PART_ID, SRC_ID, SRC_TYP)
ON SOC.R_PART.PART_ID = s.PART_ID
WHEN NOT MATCHED THEN INSERT (PART_ID, SRC_ID, SRC_TYP)
    VALUES (s.PART_ID, s.SRC_ID, s.SRC_TYP);

MERGE INTO SOC.O_STFF
USING (
    SELECT
        PART_ID,
        WORK_STRT_DTTM,
        WORK_END_DTTM,
        WORK_END_RESN,
        (SELECT execid FROM VarTable) AS EXEC_ID
    FROM
        WRK.O_STFF
) AS s(PART_ID, WORK_STRT_DTTM, WORK_END_DTTM, WORK_END_RESN, EXEC_ID)
ON SOC.O_STFF.PART_ID = s.PART_ID
WHEN NOT MATCHED THEN INSERT (PART_ID, WORK_STRT_DTTM, WORK_END_DTTM, WORK_END_RESN, EXEC_ID)
    VALUES (s.PART_ID, s.WORK_STRT_DTTM, s.WORK_END_DTTM, s.WORK_END_RESN, s.EXEC_ID);

MERGE INTO SOC.O_INDIV
USING (
    SELECT
        PART_ID,
        INDV_NAME,
        INDIV_FIRS_NAME,
        INDV_STTS_CD,
        CRTN_DTTM,
        UPDT_DTTM,
        BIRT_DT,
        BIRT_CITY,
        BIRT_CNTR,
        WRKL_NUM,
        (SELECT execid FROM VarTable) AS EXEC_ID
    FROM
        WRK.O_INDIV
) AS s(PART_ID, INDV_NAME, INDIV_FIRS_NAME, INDV_STTS_CD, CRTN_DTTM, UPDT_DTTM,BIRT_DT,BIRT_CITY,BIRT_CNTR,WRKL_NUM, EXEC_ID)
ON SOC.O_INDIV.PART_ID = s.PART_ID
WHEN NOT MATCHED THEN INSERT (PART_ID, INDV_NAME, INDIV_FIRS_NAME, INDV_STTS_CD, CRTN_DTTM, UPDT_DTTM,BIRT_DT,BIRT_CITY,BIRT_CNTR,WRKL_NUM, EXEC_ID)
    VALUES (s.PART_ID, s.INDV_NAME, s.INDIV_FIRS_NAME, s.INDV_STTS_CD, s.CRTN_DTTM, s.UPDT_DTTM,s.BIRT_DT,s.BIRT_CITY,s.BIRT_CNTR,s.WRKL_NUM, s.EXEC_ID);

 
MERGE INTO SOC.O_TELP
USING (
    SELECT
        PART_ID,
        CNTR_CD,
        TELP_NUM,
        STRT_VALD_DTTM,
        END_VALD_DTTM,
        (SELECT execid FROM VarTable) AS EXEC_ID
    FROM
        WRK.O_TELP
) AS s(PART_ID, CNTR_CD, TELP_NUM, STRT_VALD_DTTM, END_VALD_DTTM, EXEC_ID)
ON SOC.O_TELP.PART_ID = s.PART_ID
WHEN NOT MATCHED THEN INSERT (PART_ID, CNTR_CD, TELP_NUM, STRT_VALD_DTTM, END_VALD_DTTM, EXEC_ID)
    VALUES (s.PART_ID, s.CNTR_CD, s.TELP_NUM, s.STRT_VALD_DTTM, s.END_VALD_DTTM, s.EXEC_ID);

MERGE INTO SOC.O_ADDR
USING (
    SELECT
        PART_ID,
        STRT_NUM,
        STRT_DSC,
        COMP_STRT,
        POST_CD,
        CITY_NAME,
        CNTR_NAME,
        STRT_VALD_DTTM,
        END_VALD_DTTM,
        (SELECT execid FROM VarTable) AS EXEC_ID
    FROM
        WRK.O_ADDR
) AS s(PART_ID, STRT_NUM, STRT_DSC, COMP_STRT, POST_CD, CITY_NAME, CNTR_NAME, STRT_VALD_DTTM, END_VALD_DTTM, EXEC_ID)
ON SOC.O_ADDR.PART_ID = s.PART_ID
WHEN NOT MATCHED THEN INSERT (PART_ID, STRT_NUM, STRT_DSC, COMP_STRT, POST_CD, CITY_NAME, CNTR_NAME, STRT_VALD_DTTM, END_VALD_DTTM, EXEC_ID)
    VALUES (s.PART_ID, s.STRT_NUM, s.STRT_DSC, s.COMP_STRT, s.POST_CD, s.CITY_NAME, s.CNTR_NAME, s.STRT_VALD_DTTM, s.END_VALD_DTTM, s.EXEC_ID);

MERGE INTO SOC.O_TRET
USING (
    SELECT
        TRET_ID,
        MEDC_ID,
        MEDC_QTY,
        DOSG_DSC,
        CONS_ID,
        TRET_CRTN_DTTM,
        (SELECT execid FROM VarTable) AS EXEC_ID
    FROM
        WRK.O_TRET
) AS s(TRET_ID, MEDC_ID, MEDC_QTY, DOSG_DSC, CONS_ID, TRET_CRTN_DTTM, EXEC_ID)
ON (SOC.O_TRET.TRET_ID = s.TRET_ID and SOC.O_TRET.MEDC_ID = s.MEDC_ID)
WHEN NOT MATCHED THEN INSERT (TRET_ID, MEDC_ID, MEDC_QTY, DOSG_DSC, CONS_ID, TRET_CRTN_DTTM, EXEC_ID)
    VALUES (s.TRET_ID, s.MEDC_ID, s.MEDC_QTY, s.DOSG_DSC, s.CONS_ID, s.TRET_CRTN_DTTM, s.EXEC_ID);

MERGE INTO SOC.O_CONS
USING (
    SELECT
        CONS_ID,
        STFF_ID,
        PATN_ID,
        CONS_STRT_DTTM,
        CONS_END_DTTM,
        PATN_WEGH,
        PATN_TEMP,
        TEMP_UNIT,
        BLD_PRSS,
        PATH_DSC,
        DIBT_IND,
        TRET_ID,
        HOSP_IND,
        (SELECT execid FROM VarTable) AS EXEC_ID
    FROM
        WRK.O_CONS
) AS s(CONS_ID, STFF_ID, PATN_ID, CONS_STRT_DTTM, CONS_END_DTTM, PATN_WEGH, PATN_TEMP, TEMP_UNIT, BLD_PRSS, PATH_DSC, DIBT_IND, TRET_ID, HOSP_IND, EXEC_ID)
ON SOC.O_CONS.CONS_ID = s.CONS_ID
WHEN NOT MATCHED THEN INSERT (CONS_ID, STFF_ID, PATN_ID, CONS_STRT_DTTM, CONS_END_DTTM, PATN_WEGH, PATN_TEMP, TEMP_UNIT, BLD_PRSS, PATH_DSC, DIBT_IND, TRET_ID, HOSP_IND, EXEC_ID)
    VALUES (s.CONS_ID, s.STFF_ID, s.PATN_ID, s.CONS_STRT_DTTM, s.CONS_END_DTTM, s.PATN_WEGH, s.PATN_TEMP, s.TEMP_UNIT, s.BLD_PRSS, s.PATH_DSC, s.DIBT_IND, s.TRET_ID, s.HOSP_IND, s.EXEC_ID);

MERGE INTO SOC.O_HOSP
USING (
    SELECT
        HOSP_ID,
        CONS_ID,
        ROOM_NUM,
        HOSP_STRT_DTTM,
        HOSP_END_DTTM,
        HOSP_FINL_RATE,
        STFF_ID,
        (SELECT execid FROM VarTable) AS EXEC_ID
    FROM
        WRK.O_HOSP
) AS s(HOSP_ID, CONS_ID, ROOM_NUM, HOSP_STRT_DTTM, HOSP_END_DTTM, HOSP_FINL_RATE, STFF_ID, EXEC_ID)
ON SOC.O_HOSP.HOSP_ID = s.HOSP_ID
WHEN NOT MATCHED THEN INSERT (HOSP_ID, CONS_ID, ROOM_NUM, HOSP_STRT_DTTM, HOSP_END_DTTM, HOSP_FINL_RATE, STFF_ID, EXEC_ID)
    VALUES (s.HOSP_ID, s.CONS_ID, s.ROOM_NUM, s.HOSP_STRT_DTTM, s.HOSP_END_DTTM, s.HOSP_FINL_RATE, s.STFF_ID, s.EXEC_ID);

-- Drop the volatile table
DROP TABLE VarTable;
